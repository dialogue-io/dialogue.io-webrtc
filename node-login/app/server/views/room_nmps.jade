// preset form values if we receive a userdata object //
- user = typeof(udata) != 'undefined' ? udata : {}
// store the userId on the client side in a hidden input field //
input(type='hidden', value= user._id)#userId
input(type='hidden', value= user.name)#userName
!!! 5
html(lang='en', style='height: 100%;')
head
    meta(charset='utf-8')
    title WebRTC Multichat
    meta(name='description', content='')
    meta(name='author', content='')
    link(href='/css/bootstrap.css', rel='stylesheet')
    style
      body {
      padding-top: 10px;
      height: 90%;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 10pt;
      }
      #drop {
      font-size: 18px;
      font-weight: bold;
      text-align: center;
      padding: 1em 0;
      margin: 1em 0;
      color: #555;
      border: 3px dashed #555;
      border-radius: 7px;
      cursor: default;
      height: 50%;
      }
      #drop.hover {
      color: #f00;
      border-color: #f00;
      border-style: solid;
      box-shadow: inset 0 3px 4px #888;
      }
    script(type='text/javascript', src='/js/jquery.js')
    script(type='text/javascript', src='/socket.io/socket.io.js')
    script(type='text/javascript', src='/js/RTClibrary.js')
    script
      var socket = io.connect('http://dialogue.io:8080');
      var me;
      var Meeting = new Array();
      var index = {};
      var counter = 0;
      // on connection to server, ask for user's name with an anonymous callback
      socket.on('connect', function(){
      // call the server-side function 'adduser' and send one parameter (value of prompt)
      //getUserMedia(function(status) {
      //if (status == true){
      me = userName.value
      socket.emit('adduser', me);
      console.log("I am "+me);
      $('#data').focus();
      //} else {
      //window.location.reload()
      //}
      //});
      });
      socket.on('logfiles', function(logs){
      //Updates the list of logfiles avaliable for download
      $('#logfiles').empty();
      $.each(logs, function(key, value) {
      $('#logfiles').append('<tr><td id="'+value+'"><a href="logs/'+value+'" target="_blank">'+value+'</a></td></tr>');
      });
      });
      socket.on('disconnect',function(username) {
      console.log(username+" has disconnected");
      try {
      d = document.getElementById("webcam");
      /**if (document.getElementById("video"+username).src == mainVideo.src) {
      mainVideo.style.opacity = 0;
      mainVideo.src = null;
      }**/
      Meeting[username].onForcedHangup();
      Meeting[username] = null;
      d.removeChild(document.getElementById("video"+username));
      } catch (e) {
      console.log("User not avaliable to remove "+e);
      }
      });
      // listener, whenever the server emits 'updatechat', this updates the chat body
      socket.on('updatechat', function (username, data) {
      $('#chat-body').append('<tr"><td style:"color: #A65500;"><strong>'+username+'</strong></td><td style:"color: #A65500;">'+data+'</td></tr>');
      $('#chat').scrollTop(9000);
      });
      //Listener for incomming signaling messages
      socket.on('onSignaling', function (message) {
      if ((Meeting[message.from] == undefined) || (Meeting[message.from] == null)) {
      console.log("Starting call with "+message.from);
      Meeting[message.from] = new Conference();
      Meeting[message.from].setLocalVideo("localVideo",function(status){
      if (status == true){
      //Meeting[message.from].setLocalStream(globalLocalStream);
      Meeting[message.from].Answer(message.from,"webcam", function(status){
      if(status==true){
      addHangButton(message.from);
      Meeting[message.from].onChannelMessage(message);
      } else {
      console.log("Error answering call");
      }
      });
      } else {
      console.log("Error");
      }
      });
      counter = counter+1;
      } else if(Meeting[message.from]){
      Meeting[message.from].onChannelMessage(message);
      } else {
      console.log("Unexpected error");
      }
      });
      // listener, whenever the server emits 'updateusers', this updates the username list
      socket.on('updateusers', function(data) {
      $('#users-body').empty();
      $.each(data, function(key, value) {
      if (key == me) {
      $('#users-body').append('<tr><td id="'+key+'"><h4>'+key+' (me)</h3></td></tr>');
      } else {
      $('#users-body').append('<tr><td id="'+key+'"><h4>'+key+'</h3></td></tr>');
      $('#'+key).attr('onclick','start("'+key+'")');
      }
      });
      });
      socket.on('file', function(username, data) {
      //console.log('HERE');
      //console.log(username +' sent ' + data);
      document.getElementById('drop').innerHTML= username +' sent:<br>'+data;
      });
      socket.on('image', function(username, data) {
      //console.log('HERE');
      //console.log(username +' sent ' + data);
      img = document.createElement('img');
      img.style.height = "100%";
      img.src= 'data:image/bmp;base64,'+data;
      document.getElementById('drop').innerHTML='';
      document.getElementById('drop').appendChild(img);
      });
  body  
    div.navbar.navbar-fixed-top
        div.navbar-inner
            div.container-fluid
                ul#global-nav.nav.pull-left
                    a(href='/home').brand dialogue.io
                button#btn-logout.btn.btn-primary
                    i.icon-lock.icon-white
                    | Sign Out
    .container-fluid(style='height: 85%; margin-top:30px;')
      .row-fluid(style='height: 90%;')
        .span4(style='max-width: 15%; height: 100%; overflow: auto;')
          h2 Users
          table.table-condensed
            tbody#users-body
          h2 Logs
          #logfiles
        .span9(style='height: 100%;')
          #chat(style='height: 80%; overflow: auto; margin: 2%; border: 1px solid #CCC; border-radius: 5px; background-color: white;')
            table.table.table-condensed
              tbody#chat-body
          .span12
            .control-group
              .controls
                input#data.input-xlarge(type='text', style='width: 95%;')
      .row-fluid(style='height: 30%;')
        .span12(style='height: 90%;')
          .span4(style='max-width: 20%; height: 90%;')
          .span4.pagination-centered(style='min-width: 60%; height: 90%;')
            #webcam
              video#localVideo(height='240px;', autoplay='autoplay', onclick='mainWindow(this);', style='-webkit-transition: opacity 2s; -webkit-transform: scale(-1, 1); opacity: 1; margin-right: 3px; height: 90%;')
          .span4(style='max-width: 15%; height: 90%;')
            #footer
            #buttons
            #drop Drop
            .attachments-drop-zone
              .drop-zone-image
              .drop-zone-text Drop files here to attach them
        .span12.pagination-centered(style='min-width: 100%;')
          p.lead(style='font-size: 14px;')
            a(href='https://tools.google.com/dlpage/chromesxs/', target='_blank') Chrome Canary 
            | required. Linux users install 
            a(href='http://www.chromium.org/getting-involved/dev-channel', target='_blank') Chromium Dev
            | . Feedback, complaints and cakes 
            a(href='mailto:albert.abello.lozano@aalto.fi') here
            | .
    script
      var globalLocalStream;
      var localVideo = document.getElementById("localVideo");
      var mainVideo = document.getElementById("mainVideo");
      // on load of page
      $(function(){
      // when the client hits ENTER on their keyboard
      $('#data').keypress(function(e) {
      if ((me != null) || (me != "")) {
      if(e.which == 13) {
      if ($("#data").val()!=null || $("#data").val()!=""){
      if($(this).val().length > 0){ //If something is written
      e.preventDefault();
      var message = $('#data').val();
      $('#data').val('');
      $(this).blur();
      socket.emit('sendchat', message);
      $('#chat').scrollTop(9000);
      }
      }
      $('#data').focus();
      }
      }
      });
      $('#data').focus();
      });
      getUserMedia = function(callback) {
      // getUserMedia() feature detection
      navigator.getUserMedia_ = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia)
      if (navigator.getUserMedia_) {
      try {
      //Object based request (new versions of Chrome)
      navigator.getUserMedia_({audio:true, video:true}, function(stream){
      console.log("User has granted access to local media.");
      if ((typeof MediaStream !== "undefined" && MediaStream !== null) && stream instanceof MediaStream) {
      localVideo.src = stream;
      globalLocalStream = stream;
      return localVideo.pl
      } else {
      globalLocalStream = stream;
      var vendorURL = window.URL || window.webkitURL;
      localVideo.src = vendorURL ? vendorURL.createObjectURL(stream) : stream;
      }
      localVideo.onerror = function () {
      stream.stop();
      }
      if (callback)
      callback(true);
      }, onUserMediaError);
      console.log("Requested access to local media with new syntax.");
      } catch (e) {
      try {
      //String based request for usermedia (Opera and old Chrome versions)
      navigator.getUserMedia_("video,audio", function(stream){
      console.log("User has granted access to local media.");
      if ((typeof MediaStream !== "undefined" && MediaStream !== null) && stream instanceof MediaStream) {
      localVideo.src = stream;
      globalLocalStream = stream;
      return localVideo.pl
      } else {
      globalLocalStream = stream;
      var vendorURL = window.URL || window.webkitURL;
      localVideo.src = vendorURL ? vendorURL.createObjectURL(stream) : stream;
      }
      localVideo.onerror = function () {
      stream.stop();
      }
      if (callback)
      callback(true);
      }, onUserMediaError);
      console.log("Requested access to local media with old syntax.");
      } catch (e) {
      alert("webkitGetUserMedia() failed. Is the MediaStream flag enabled in about:flags?");
      console.log("webkitGetUserMedia failed with exception: " + e.message);
      if (callback)
      callback(false);
      }
      }
      }
      };
      function onUserMediaError(error) {
      console.log("Failed to get access to local media. Error code was " + error.code);
      alert("Failed to get access to local media. Error code was " + error.code + ".");
      };
      function start(id) {
      if ((Meeting[id] == undefined) || (Meeting[id] == null)) {
      console.log("Starting call to "+id);
      Meeting[id] = new Conference();
      Meeting[id].setLocalVideo("localVideo",function(status){
      if (status == true){
      //Meeting[id].setLocalStream(globalLocalStream);
      Meeting[id].Call(id,"webcam",function(status){
      if (status==false){
      alert("Call error!");
      } else {
      addHangButton(id);
      }
      });
      } else {
      console.log("Error");
      }
      });
      }
      }
      function addHangButton(id){
      //$('#'+id).attr('onclick','');
      document.getElementById(id).setAttribute('style','color:#A65500;');
      //_elem = "<input type=\\"button\" id=\"hangup"+id+"\" value=\""+id+" (Hang up)\" onclick=\"Meeting['"+id+"'].onHangup()\" />"
      //$('#buttons').append(_elem);
      }
      //Drag and drop
      var totFSize = 0;
      if(window.FileReader) {
      addEventHandler(window, 'load', function() {
      var status = document.getElementById('status');
      var drop   = document.getElementById('drop');
      function cancel(e) {
      if (e.preventDefault) { e.preventDefault(); }
      return false;
      }
      // Tells the browser that we *can* drop on this target
      addEventHandler(drop, 'dragover', cancel);
      addEventHandler(drop, 'dragenter', cancel);
      });
      } else {
      footer.innerHTML = 'Your browser does not support the HTML5 FileReader.';
      }
      function addEventHandler(obj, evt, handler) {
      if(obj.addEventListener) {
      // W3C method
      obj.addEventListener(evt, handler, false);
      } else if(obj.attachEvent) {
      // IE method.
      obj.attachEvent('on'+evt, handler);
      } else {
      // Old school method.
      obj['on'+evt] = handler;
      }
      }
      addEventHandler(drop, 'drop', function (e) {
      e = e || window.event; // get window.event if e argument missing (in IE)
      if (e.preventDefault) { e.preventDefault(); } // stops the browser from redirecting off to the image.
      var dt    = e.dataTransfer;
      var files = dt.files;
      for (var i=0; i<files.length; i++) {
      uploadFile(files[i],i);
      }
      return false;
      });
      //Process the file and if it conains text or img
      function uploadFile(file, totalFiles) {
      var reader = new FileReader();
      // Handle errors that might occur while reading the file (before upload).
      reader.onerror = function(evt) {
      var message;
      // REF: http://www.w3.org/TR/FileAPI/#ErrorDescriptions
      switch(evt.target.error.code) {
      case 1:
      message = file.name + " not found.";
      break;
      case 2:
      message = file.name + " has changed on disk, please re-try.";
      break;
      case 3:
      messsage = "Upload cancelled.";
      break;
      case 4:
      message = "Cannot read " + file.name + ".";
      break;
      case 5:
      message = "File too large for browser to upload.";
      break;
      }
      //$("#upload-status-text").html(message);
      console.log(message);
      }
      if(file.type.indexOf("text") >= 0){
      var reader = new FileReader();
      reader.onload = function(e) {
      result = e.target.result;
      console.log(result);
      socket.emit('file', result);
      console.log('File correctly sent');
      document.getElementById('drop').innerHTML='File sent. Drag another file to send again.';
      }
      reader.readAsBinaryString(file);
      } else {
      // When the file is done loading, POST to the server.
      reader.onloadend = function(evt){
      var data = evt.target.result;
      // Make sure the data loaded is long enough to represent a real file.
      if(data.length > 128){
      /*
      * Per the Data URI spec, the only comma that appears is right after
      * 'base64' and before the encoded content.
      */
      var base64StartIndex = data.indexOf(',') + 1;
      /*
      * Make sure the index we've computed is valid, otherwise something
      * is wrong and we need to forget this upload.
      */
      if(base64StartIndex < data.length) {
      socket.emit('image', data.substring(base64StartIndex));
      }
      }
      };
      // Start reading the image off disk into a Data URI format.
      reader.readAsDataURL(file);
      };
      }
      /*$("video").click(function() {
      console.log("here");
      var src = $(this).attr("src");
      console.log(src);
      return;
      });*/
      mainWindow = function(object) {
      $("video").css("border","0px");
      document.getElementById("mainVideo").style.opacity = 1;
      document.getElementById("mainVideo").setAttribute("src","");
      document.getElementById("mainVideo").setAttribute("src",object.getAttribute("src"));
      object.setAttribute("style","-webkit-transition: opacity 2s; -webkit-transform: scale(-1, 1); opacity: 1; margin-right: 3px; height:90%; border: 2px solid #6C7B84; padding:1px;");
      }
    script(type='text/javascript', src='/js/bootstrap.js')

include modals/alert
include modals/confirm

script(src='/js/views/room.js')
script(src='/js/controllers/homeController.js')
